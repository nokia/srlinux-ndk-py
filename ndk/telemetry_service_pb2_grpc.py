# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ndk import telemetry_service_pb2 as ndk_dot_telemetry__service__pb2


class SdkMgrTelemetryServiceStub(object):
    """*
    Represents service for telemetry service to store state data.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TelemetryAddOrUpdate = channel.unary_unary(
                '/srlinux.sdk.SdkMgrTelemetryService/TelemetryAddOrUpdate',
                request_serializer=ndk_dot_telemetry__service__pb2.TelemetryUpdateRequest.SerializeToString,
                response_deserializer=ndk_dot_telemetry__service__pb2.TelemetryUpdateResponse.FromString,
                )
        self.TelemetryDelete = channel.unary_unary(
                '/srlinux.sdk.SdkMgrTelemetryService/TelemetryDelete',
                request_serializer=ndk_dot_telemetry__service__pb2.TelemetryDeleteRequest.SerializeToString,
                response_deserializer=ndk_dot_telemetry__service__pb2.TelemetryDeleteResponse.FromString,
                )


class SdkMgrTelemetryServiceServicer(object):
    """*
    Represents service for telemetry service to store state data.
    """

    def TelemetryAddOrUpdate(self, request, context):
        """Add or update telemetry data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TelemetryDelete(self, request, context):
        """Delete telemetry data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SdkMgrTelemetryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TelemetryAddOrUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.TelemetryAddOrUpdate,
                    request_deserializer=ndk_dot_telemetry__service__pb2.TelemetryUpdateRequest.FromString,
                    response_serializer=ndk_dot_telemetry__service__pb2.TelemetryUpdateResponse.SerializeToString,
            ),
            'TelemetryDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.TelemetryDelete,
                    request_deserializer=ndk_dot_telemetry__service__pb2.TelemetryDeleteRequest.FromString,
                    response_serializer=ndk_dot_telemetry__service__pb2.TelemetryDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'srlinux.sdk.SdkMgrTelemetryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SdkMgrTelemetryService(object):
    """*
    Represents service for telemetry service to store state data.
    """

    @staticmethod
    def TelemetryAddOrUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/srlinux.sdk.SdkMgrTelemetryService/TelemetryAddOrUpdate',
            ndk_dot_telemetry__service__pb2.TelemetryUpdateRequest.SerializeToString,
            ndk_dot_telemetry__service__pb2.TelemetryUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TelemetryDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/srlinux.sdk.SdkMgrTelemetryService/TelemetryDelete',
            ndk_dot_telemetry__service__pb2.TelemetryDeleteRequest.SerializeToString,
            ndk_dot_telemetry__service__pb2.TelemetryDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
